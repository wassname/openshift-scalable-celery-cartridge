#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH
source "${OPENSHIFT_PYTHON_DIR}usr/versions/${OPENSHIFT_PYTHON_VERSION}/lib/create-virtenv"
source "${OPENSHIFT_PYTHON_DIR}usr/versions/${OPENSHIFT_PYTHON_VERSION}/lib/python_config"
source "${OPENSHIFT_PYTHON_DIR}usr/versions/${OPENSHIFT_PYTHON_VERSION}/lib/util"

HTTPD_CFG_FILE=${OPENSHIFT_PYTHON_DIR}etc/conf/httpd_nolog.conf
HTTPD_CFG_DIR=${OPENSHIFT_PYTHON_DIR}etc/conf.d/
ERB_HTTPD_CFG_DIR=${OPENSHIFT_PYTHON_DIR}usr/versions/${OPENSHIFT_PYTHON_VERSION}/etc/conf.d/
HTTPD_PASSENV_FILE=${HTTPD_CFG_DIR}passenv.conf
HTTPD_PID_FILE=${OPENSHIFT_PYTHON_DIR}run/httpd.pid

# construct the configuration directives for httpd
HTTPD_CMD_CONF="-C 'Include ${HTTPD_CFG_DIR}*.conf' -f $HTTPD_CFG_FILE"
for dir in /etc/openshift/cart.conf.d/httpd{,/python} ; do
    [ -d $dir ] && HTTPD_CMD_CONF="$HTTPD_CMD_CONF -c 'Include $dir/*.conf'"
done

# For backwards compatibility
export APPDIR=$OPENSHIFT_PYTHON_DIR

function start_app() {
    echo "Starting Python ${OPENSHIFT_PYTHON_VERSION} cartridge (celery worker)"

    if appserver_pidfile_exists; then
      echo "Application is already running"
      return 0
    fi

    cd "$OPENSHIFT_REPO_DIR"

    LOGPIPE=${OPENSHIFT_HOMEDIR}/app-root/runtime/logshifter-python
    rm -f $LOGPIPE && mkfifo $LOGPIPE

	/usr/bin/logshifter -tag python < $LOGPIPE &
	echo "setting PYTHONPATH"
	PYTHONPATH=$OPENSHIFT_DATA_DIR:$OPENSHIFT_DATA_DIR/config/:$OPENSHIFT_REPO_DIR/.openshift:$OPENSHIFT_REPO_DIR/wsgi:$OPENSHIFT_REPO_DIR:$PYTHONPATH
	
	echo "Starting celery worker"
	CELERY_RUNNING=$(ps -ef | grep "celery worker" | grep -v "grep" | wc -l)
	echo "Celery already running?" $CELERY_RUNNING

	if [ $CELERY_RUNNING -eq 0 ]
	then
		rm ${OPENSHIFT_TMP_DIR}celery-worker.pid 
		nice -n 10 celery multi start worker --config=${OPENSHIFT_CELERY_CONFIG=celeryconfig} --concurrency=1  --autoscale=6,1 --loglevel=DEBUG --hostname=$OPENSHIFT_APP_DNS --pidfile=${OPENSHIFT_TMP_DIR}celery-worker.pid --logfile=${OPENSHIFT_LOG_DIR}celery.log >> ${OPENSHIFT_LOG_DIR}/celery.log 2>&1 &
	fi

}


function start() {
    start_app
}

function stop_app() {
    if [ -s ${OPENSHIFT_PYTHON_DIR}run/appserver.pid ]; then
        kpid=$(cat ${OPENSHIFT_TMP_DIR}celery-worker.pid)
        iters=0
        while kill $kpid >/dev/null 2>&1; do
            iters=$(($iters + 1))
            [ $iters -gt 10 ] && break
            sleep 1
        done
        kill -KILL $kpid >/dev/null 2>&1 || :
        rm -f ${OPENSHIFT_TMP_DIR}celery-worker.pid
    fi
}

function stop() {
    echo "Stopping Python ${OPENSHIFT_PYTHON_VERSION} cartridge"

    # Do both in case the last commit transitioned from one to the
    # other or there was a problem.
    stop_app
}


function restart() {
    echo "Restarting Python ${OPENSHIFT_PYTHON_VERSION} cartridge"
    stop_app
    start_app

}

function status() {

    pid=`cat ${OPENSHIFT_TMP_DIR}celery-worker.pid`
    info=`celery multi show worker`
    client_result $pwd
    if [ -f $pid ] && ( kill -0 $(cat $pid) ); then
        client_result "Celery is running ${info} at pid:${pid}"
    else
        client_result "Celery is not running"
    fi
}

# Clean up any log files
function tidy() {
    client_message "Emptying python logs in dir: $OPENSHIFT_LOG_DIR"
    shopt -s dotglob
    rm -rf $OPENSHIFT_LOG_DIR/celery.log*
}

function build() {
    if [ -n "$OPENSHIFT_PYPI_MIRROR_URL" ]; then
        m=$OPENSHIFT_PYPI_MIRROR_URL
        if curl -m 15 -f -s "$m" &>/dev/null
        then
            OPENSHIFT_PYTHON_MIRROR="-i $m"
        fi
    fi

    if force_clean_build_enabled_for_latest_deployment; then
        echo "Force-clean builds are enabled" 1>&2
        rm -rf $VIRTUAL_ENV/*
    fi

    if [ ! -f $VIRTUAL_ENV/bin/python ]; then
      echo "Recreating virtenv" 1>&2
      create-virtenv
    fi

    echo "Activating virtenv"
    activate-virtenv

    local requirements_file=${OPENSHIFT_PYTHON_REQUIREMENTS_PATH:-requirements.txt}
    if [ -f ${OPENSHIFT_REPO_DIR}${requirements_file} ]; then
        echo "Checking for pip dependency listed in ${requirements_file} file.."
        ( cd $OPENSHIFT_REPO_DIR; pip install -r ${OPENSHIFT_REPO_DIR}${requirements_file} $OPENSHIFT_PYTHON_MIRROR )
    fi

    if [ -f ${OPENSHIFT_REPO_DIR}/setup.py ]; then
        echo "Running setup.py script.."
        ( cd $OPENSHIFT_REPO_DIR; python ${OPENSHIFT_REPO_DIR}/setup.py develop $OPENSHIFT_PYTHON_MIRROR )
    fi
    
    if [ -f ${OPENSHIFT_REPO_DIR}/setup.py ]; then
        echo "Running setup.py script.."
        ( cd $OPENSHIFT_REPO_DIR; python ${OPENSHIFT_REPO_DIR}/setup.py develop $OPENSHIFT_PYTHON_MIRROR )
    fi
    
    echo "Running installing celery.."
    ( cd $OPENSHIFT_REPO_DIR; pip install celery )

    relative-virtenv
}

function deploy() {
    relative-virtenv
    activate-virtenv
}

case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  reload)    restart ;;
  status)    status ;;
  tidy)      tidy ;;
  build)     build ;;
  deploy)    deploy ;;
  *)         exit 0
esac
